* Introduction
There are tons of manuals, courses, presentations all around the Internet, very good man (git help <command>) with loads of examples and explanations, but people are still keep struggling with it. 
I'll try to explain it from the point of view of my own understanding, which could be not very precise technically, but I hope it could make understanding a bit easier for someone.
* Basic terms
Basics is the first thing to start from, right?
** TODO Commit
Commit is one of the basic terms of git, but very important for understanding of it's behavior.
Few things you need to remember:
- A single commit is a set of patches (or changes, differences, etc.) for any number of files belonging to repository at once. 
That means actually, that every commit might be viewed as a whole snapshot, or version in repository. Though it is only a set of differences applied to the parent of this commit. 
Git reconstructs the whole repository structure by following the history of the chosen commit during checkout.
- Commits are not changeable physically. 
Git always creates new commits even if it seems like you are changing something. Every commit has it's own unique identifier, a hash sum, called "sha1".
- Every single commit (except the very first one in the repository history) is bound to at least one another commit. 
Let's call that parent commit as the "base" of that commit. It is essential for understanding the "rebase" process.
** Branch
Branches are pointers to commits. Single branch can point only to the single commit. It doesn't point anywhere else, so by addressing the branch you are addressing the commit it is placed on. It's really enough to know where the branch ends to see all the commits of that branch.
Branch itself doesn't need to track the relationship between commits, those relationships are properties of commits. It is a useful tool for dealing with your commits, it doesn't do much on it's own. Committing into the branch only means making a new commit on top of the current one and moving the branch (like a pointer) to that new commit.
** TODO Repository
Every git repository is a self-efficient working copy of the project usually. Or at least it contains all the links to it's dependencies for each it's commit. From point of view of git it is really doesn't mater which repository is main, or clone. You may work with every repository outside of your local one as like it is a remote repository.
* TODO Operations
** TODO Checkout
Checking out a commit is selecting the version in the history of your repository. After checkout you'll have the same state of your working folder as you had after committing.
Checkout of a file from another commit is possible too with a similar command. E.g.
** TODO Merge
** TODO Rebase
** TODO Fetch
** TODO Pull
** TODO Push
* TODO Useful stuff
** History of actions
reflog
** Addressing the commits
There is a lot of ways to address a single commit. It can be either stating the branch name, if you want to address the last commit on the branch, or giving a sha1, or using so called ancestry reference. 


* TODO Good Practices
